pipeline {
    agent any

    stages {
        // 1단계: Git 클론
        stage('Git Clone') {
            steps {
                git branch: 'dev-be', credentialsId: 'gitlab-credentials', url: 'https://lab.ssafy.com/s11-final/S11P31B105.git'
            }
            post {
                success { echo 'Repository clone 성공!' }
                failure { echo 'Repository clone 실패!' }
            }
        }

        // 2단계: secret.properties 파일 준비
        stage('Prepare secret.properties') {
            steps {
                script {
                    echo 'secret.properties 파일 준비 시작...'
                    withCredentials([file(credentialsId: 'secret-properties', variable: 'SECRET_FILE')]) {
                        sh 'cp $SECRET_FILE ./backend/spring/wassu/src/main/resources/secret.properties'
                    }
                }
            }
            post {
                success { echo 'secret.properties 파일 준비 완료!' }
                failure { echo 'secret.properties 파일 준비 실패!' }
            }
        }

        // 3단계: Docker 이미지 빌드
        stage('Build Docker Image') {
            steps {
                dir('./backend/spring/wassu') {  
                    sh 'docker build --no-cache -t spring .'
                }
                echo 'Docker 이미지 빌드 완료'
            }
            post {
                success { echo 'Docker 이미지 빌드 성공!' }
                failure { echo 'Docker 이미지 빌드 실패!' }
            }
        }

        // 4단계: Docker 컨테이너 실행 (테스트)
        stage('Run Docker Container') {
            steps {
                script {
                    echo 'Docker 컨테이너 실행 시작 (테스트 중)...'
                    sh 'docker run -d --name spring-test -p 8080:8080 spring'
                }
            }
            post {
                success { echo 'Docker 컨테이너 실행 및 테스트 성공!' }
                failure { echo 'Docker 컨테이너 실행 및 테스트 실패!' }
            }
        }
    }

    post {
        always {
            echo '파이프라인 실행 완료'
            // 컨테이너 종료 및 제거
            sh 'docker stop spring-test || true'
            sh 'docker rm spring-test || true'
        }
        success { echo '배포 성공' }
        failure { echo '배포 실패' }
    }
}
